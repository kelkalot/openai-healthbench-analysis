# -*- coding: utf-8 -*-
"""healthBench-simple-conent-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rs4lqSGwXzzgObrf6tLkei9kRKIMJEfI
"""

# Simple conent analysis of the HealthBench dataset from openai to find non medical conent in the text.
# You need and openai api key to do this or change to any other LLM of your choice.
# The produced output file is shared here: https://drive.google.com/file/d/1yPZhYySPcA4HktkTew2AbKDWP3AnI7hV/view?usp=sharing
import json
from openai import OpenAI
import os

# Data
INPUT_FILENAMES = [
    "2025-05-07-06-14-12_oss_eval.jsonl",
    "consensus_2025-05-09-20-00-46.jsonl",
    "hard_2025-05-08-21-00-10.jsonl"
]
OUTPUT_FILENAME = "non_medical_prompts_v4_gpt4_first_turn.jsonl"
OPENAI_MODEL = "gpt-4o"

def check_if_non_medical(text_to_classify, client):

    #Uses OpenAI API (GPT-4o) to classify if the given text is non-medical with strict guidelines. This can be refinded and adjusted if needed.
    #Returns True if non-medical, False otherwise.

    if not text_to_classify or not text_to_classify.strip():
        print("Warning: Received empty text for classification. Skipping.")
        return False

    max_chars_for_api_prompt = 15000
    if len(text_to_classify) > max_chars_for_api_prompt:
        print(f"Warning: Text to classify is very long ({len(text_to_classify)} chars). Truncating for API call.")
        text_to_send = text_to_classify[:max_chars_for_api_prompt]
    else:
        text_to_send = text_to_classify

    system_message_content = (
        "You are an highly accurate and strict expert classifier. Your task is to determine if a given text snippet is medical-related. "
        "A text is considered medical-related if it pertains to ANY of the following, even if it's a discussion, a request for description, or a question about research: "
        "- Health conditions, diseases, symptoms (physical or mental). "
        "- Treatments, therapies, or remedies (conventional, alternative, herbal, traditional; including their effects, usage, safety, or preparation). "
        "- Medical advice, health recommendations, or preventative care. "
        "- Drugs, medications, supplements (including interactions, side effects, dosages). "
        "- Medical procedures, diagnostic tests. "
        "- Human physiology, anatomy, or biology in a health or disease context. "
        "- Mental health and well-being topics like depression, anxiety, stress management when discussed in a health context. "
        "- Nutritional advice or discussions specifically related to health conditions, disease prevention, or therapy. "
        "- Discussions about medical information, scientific studies, or health research. "
        "- Questions about finding healthcare providers or services. "
        "\nIf a text touches upon ANY of these areas, it MUST be classified as 'medical'. "
        "If you are in ANY doubt, or if the text has ANY element related to these topics, classify it as 'medical'. "
        "Only classify as 'non-medical' if the text is CLEARLY and ENTIRELY unrelated to any of these health or medical topics. "
        "Respond with 'medical' or 'non-medical' only."
    )

    user_message_content = (
        f"Following the strict guidelines and comprehensive definition you've been given, is the following text medical-related or not? "
        f"\n\nText: \"{text_to_send}\""
    )

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system_message_content},
                {"role": "user", "content": user_message_content}
            ],
            max_tokens=10,
            temperature=0.0,
            top_p=1.0
        )
        classification = response.choices[0].message.content.strip().lower()

        if classification not in ["medical", "non-medical"]:
            print(f"Warning: Unexpected classification response: '{classification}'. For safety, treating as 'medical'.")
            return False
        return classification == "non-medical"
    except Exception as e:
        print(f"Error classifying text with OpenAI ({OPENAI_MODEL}): {e}")
        print(f"Problematic text (first 100 chars): {text_to_classify[:100]}...")
        return False

def process_files(input_filenames, output_filename, client):
    non_medical_items = []
    total_prompts_processed = 0
    total_non_medical_found = 0

    for filename in input_filenames:
        print(f"\nProcessing file: {filename}...")
        if not os.path.exists(filename):
            print(f"Error: File '{filename}' not found. Please ensure it's uploaded to the Colab session.")
            continue

        lines_processed_in_file = 0
        try:
            with open(filename, 'r', encoding='utf-8') as f_in:
                for i, line in enumerate(f_in):
                    total_prompts_processed += 1
                    lines_processed_in_file +=1
                    try:
                        item = json.loads(line)

                        #ONLY THE FIRST TURN'S CONTENT FOR CLASSIFICATION
                        first_turn_content = ""
                        if 'prompt' in item and isinstance(item['prompt'], list) and len(item['prompt']) > 0:
                            first_turn_data = item['prompt'][0]
                            if isinstance(first_turn_data, dict) and 'content' in first_turn_data:
                                first_turn_content = str(first_turn_data['content'])

                        if not first_turn_content.strip():
                            #This item's first turn is empty or doesn't have content, skip classification for it based on first turn.
                            #For now, we skip adding it to non-medical if first turn is unusable.
                            #print(f"Warning: First turn content is empty for item ID {item.get('prompt_id', 'N/A')}. Skipping this item for non-medical classification.")
                            continue

                        #Classify based on the first turn's content, this is not perfect but finds all the obviouys and some ambigious cases
                        if check_if_non_medical(first_turn_content, client):
                            non_medical_items.append(item)
                            total_non_medical_found += 1
                            print(f"  Flagged as non-medical based on first turn (ID: {item.get('prompt_id', 'N/A')}, First turn starts: '{first_turn_content[:70]}...')")

                        if (lines_processed_in_file) % 20 == 0:
                           print(f"  Processed {lines_processed_in_file} prompts from {filename}...")

                    except json.JSONDecodeError:
                        print(f"Error decoding JSON from line {i+1} in {filename}: {line.strip()}")
                    except Exception as e:
                        print(f"An unexpected error occurred processing line {i+1} in {filename}: {e}")
            print(f"Finished processing {lines_processed_in_file} prompts from {filename}.")

        except Exception as e:
            print(f"Error reading or processing file {filename}: {e}")

    if non_medical_items:
        print(f"\nSaving {len(non_medical_items)} non-medical items (flagged based on first turn) to {output_filename}...")
        with open(output_filename, 'w', encoding='utf-8') as f_out:
            for item in non_medical_items:
                f_out.write(json.dumps(item) + '\n')
        print("Save complete.")
    else:
        print(f"\nNo non-medical prompts were identified (based on first turn criteria) using {OPENAI_MODEL}.")

    print(f"\n--- Summary ---")
    print(f"Total prompts encountered across all files: {total_prompts_processed}")
    print(f"Total non-medical prompts found and saved: {total_non_medical_found}")

def run_analysis():
    print(f"Starting medical prompt analysis script (v4 using {OPENAI_MODEL}, first-turn classification, and stricter logic)...")

    api_key = ""
    try:
        from google.colab import userdata
        api_key = userdata.get('OPENAI_API_KEY')
        if api_key:
            print("OpenAI API key loaded from Colab secrets.")
        else:
            print("OpenAI API key not found in Colab secrets. Please enter it manually.")
            api_key = input("Please enter your OpenAI API key: ").strip()
    except ImportError:
        print("Not running in Colab or Colab secrets not used for API key.")
        api_key = input("Please enter your OpenAI API key: ").strip()

    if not api_key:
        print("OpenAI API key is required to run this script. Exiting.")
        return

    client = OpenAI(api_key=api_key)

    print(f"\nInput files: {', '.join(INPUT_FILENAMES)}")
    print(f"Output file for non-medical prompts: {OUTPUT_FILENAME}")
    print(f"Using OpenAI model: {OPENAI_MODEL} for classifying the *first turn* of each prompt.")
    print("Reminder: GPT-4 series models are more expensive.")

    process_files(INPUT_FILENAMES, OUTPUT_FILENAME, client)

    print("\nAnalysis complete.")
    print(f"If any non-medical prompts were found, they have been saved to '{OUTPUT_FILENAME}'.")

run_analysis()